// src/service/NotificationService.ts
/**
 * Service x·ª≠ l√Ω notification cho ph·ª• huynh
 */

import Notification from '@/models/notification.model';
import { BusSimulationService } from './BusSimulationService';

interface NotificationTrigger {
  tripId: string;
  studentId: string;
  parentId: string;
  targetLocation: {
    name: string;
    latitude: number;
    longitude: number;
  };
  radiusKm: number; // B√°n k√≠nh trigger (v√≠ d·ª•: 1km)
}

interface BusPosition {
  latitude: number;
  longitude: number;
}

export class NotificationService {
  /**
   * Ki·ªÉm tra v√† t·∫°o notification n·∫øu xe bus trong b√°n k√≠nh
   */
  static async checkAndNotify(
    trigger: NotificationTrigger,
    busPosition: BusPosition
  ): Promise<boolean> {
    try {
      // Ki·ªÉm tra xe bus c√≥ trong b√°n k√≠nh kh√¥ng
      const isNearby = BusSimulationService.isWithinRadius(
        busPosition.latitude,
        busPosition.longitude,
        trigger.targetLocation.latitude,
        trigger.targetLocation.longitude,
        trigger.radiusKm
      );

      if (!isNearby) {
        return false;
      }

      // Ki·ªÉm tra xem ƒë√£ g·ª≠i notification ch∆∞a (tr√°nh spam)
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const existingNotification: any = await Notification.findOne({
        userId: trigger.parentId,
        tripId: trigger.tripId,
        type: 'approaching_school',
        createdAt: { $gte: today },
      });

      if (existingNotification) {
        console.log(`Notification already sent for trip ${trigger.tripId}`);
        return false;
      }

      // T√≠nh kho·∫£ng c√°ch ch√≠nh x√°c
      const distance = BusSimulationService['calculateDistance'](
        busPosition.latitude,
        busPosition.longitude,
        trigger.targetLocation.latitude,
        trigger.targetLocation.longitude
      );

      // T·∫°o notification m·ªõi
      await Notification.create({
        userId: trigger.parentId,
        tripId: trigger.tripId,
        type: 'approaching_school',
        title: 'üöå Xe bus s·∫Øp ƒë·∫øn tr∆∞·ªùng',
        message: `Xe bus ƒëang c√°ch ${trigger.targetLocation.name} kho·∫£ng ${distance.toFixed(1)} km. Con b·∫°n s·∫Ω s·ªõm ƒë·∫øn n∆°i!`,
        isRead: false,
        data: {
          tripId: trigger.tripId,
          studentId: trigger.studentId,
          distance: distance,
          location: trigger.targetLocation.name,
        },
      });

      console.log(`‚úÖ Notification sent to parent ${trigger.parentId} for trip ${trigger.tripId}`);
      return true;
    } catch (error) {
      console.error('Error checking and notifying:', error);
      return false;
    }
  }

  /**
   * Ki·ªÉm tra t·∫•t c·∫£ c√°c chuy·∫øn ƒëi v√† g·ª≠i notification n·∫øu c·∫ßn
   */
  static async checkAllTripsAndNotify(
    trips: any[],
    schoolLocation: { name: string; latitude: number; longitude: number }
  ): Promise<number> {
    let notificationsSent = 0;

    for (const trip of trips) {
      // Ch·ªâ g·ª≠i notification cho chuy·∫øn ƒëi ƒë·∫øn tr∆∞·ªùng (departure)
      if (trip.direction !== 'departure') {
        continue;
      }

      // L·∫•y danh s√°ch h·ªçc sinh trong chuy·∫øn ƒëi
      const students = trip.studentIds || [];

      for (const studentId of students) {
        // Gi·∫£ s·ª≠ m·ªói h·ªçc sinh c√≥ 1 ph·ª• huynh (c√≥ th·ªÉ query t·ª´ DB)
        // TODO: Query parent t·ª´ student model
        const parentId = `parent_${studentId}`; // Placeholder

        const trigger: NotificationTrigger = {
          tripId: trip.tripId,
          studentId: studentId.toString(),
          parentId: parentId,
          targetLocation: schoolLocation,
          radiusKm: 1, // 1km
        };

        const sent = await this.checkAndNotify(trigger, trip.position);
        if (sent) {
          notificationsSent++;
        }
      }
    }

    return notificationsSent;
  }

  /**
   * G·ª≠i notification khi xe bus kh·ªüi h√†nh
   */
  static async notifyDeparture(
    tripId: string,
    parentIds: string[],
    routeName: string,
    departureTime: string
  ): Promise<void> {
    try {
      const notifications = parentIds.map((parentId) => ({
        userId: parentId,
        tripId: tripId,
        type: 'trip_started',
        title: 'üöå Xe bus ƒë√£ kh·ªüi h√†nh',
        message: `Chuy·∫øn xe ${routeName} ƒë√£ kh·ªüi h√†nh l√∫c ${departureTime}. B·∫°n c√≥ th·ªÉ theo d√µi v·ªã tr√≠ xe bus real-time.`,
        isRead: false,
        data: {
          tripId,
          routeName,
          departureTime,
        },
      }));

      await Notification.insertMany(notifications);
      console.log(`‚úÖ Departure notifications sent for trip ${tripId}`);
    } catch (error) {
      console.error('Error notifying departure:', error);
    }
  }

  /**
   * G·ª≠i notification khi xe bus ƒë√£ ƒë·∫øn tr∆∞·ªùng
   */
  static async notifyArrival(
    tripId: string,
    parentIds: string[],
    routeName: string,
    location: string
  ): Promise<void> {
    try {
      const notifications = parentIds.map((parentId) => ({
        userId: parentId,
        tripId: tripId,
        type: 'trip_completed',
        title: '‚úÖ Xe bus ƒë√£ ƒë·∫øn n∆°i',
        message: `Chuy·∫øn xe ${routeName} ƒë√£ ƒë·∫øn ${location}. Con b·∫°n ƒë√£ xu·ªëng xe an to√†n.`,
        isRead: false,
        data: {
          tripId,
          routeName,
          location,
        },
      }));

      await Notification.insertMany(notifications);
      console.log(`‚úÖ Arrival notifications sent for trip ${tripId}`);
    } catch (error) {
      console.error('Error notifying arrival:', error);
    }
  }
}
